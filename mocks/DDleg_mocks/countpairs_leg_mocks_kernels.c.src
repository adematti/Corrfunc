// # -*- mode: c -*-
/* File: countpairs_mocks_kernels.c.src */
/*
  This file is a part of the Corrfunc package
  Copyright (C) 2015-- Manodeep Sinha (manodeep@gmail.com)
  License: MIT LICENSE. See LICENSE file under the top-level
  directory at https://github.com/manodeep/Corrfunc/
*/


#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <stdint.h>
#if defined(USE_GSL)
#include <gsl/gsl_sf.h>
#else
#define MAX_ELL 9
#endif

#include "function_precision.h"
#include "utils.h"

#include "weight_functions_DOUBLE.h"


static inline DOUBLE legendre(const DOUBLE x, const int ell) {

    DOUBLE x2, x4, x6;
    switch (ell) {
        case 0:
            return 1.;
        case 2:
            x2 = x * x;
            return (3 * x2 - 1) / 2;
        case 4:
            x2 = x * x;
            return (35 * x2 * x2 - 30 * x2 + 3) / 8;
        case 6:
            x2 = x * x;
            x4 = x2 * x2;
            return (231 * x2 * x4 - 315 * x4 + 105 * x2 - 5) / 16;
        case 8:
            x2 = x * x;
            x4 = x2 * x2;
            return (6435 * x4 * x4 - 12012 * x4 * x2 + 6930 * x4 - 1260 * x2 + 35) / 128;
        case 1:
            return x;
        case 3:
            return (5 * x * x - 3) * x / 2;
        case 5:
            x2 = x * x;
            return (63 * x2 * x2 - 70 * x2 + 15) * x / 8;
        case 7:
            x2 = x * x;
            x4 = x2 * x2;
            return (429 * x4 * x2 - 693 * x4 + 315 * x2 - 35) * x / 16;
        case 9:
            x2 = x * x;
            x4 = x2 * x2;
            x6 = x4 * x2;
            return (12155 * x6 * x2 - 25740 * x6 + 18018 * x4 - 4620 * x2 + 315) * x / 128;
        default:
#if defined(USE_GSL)
            return gsl_sf_legendre_Pl(ell, (double) x);
#else
            return 0.;
#endif

    }
}


static inline void legendre_DOUBLE(const polearray *bins, const DOUBLE mu, const DOUBLE mu2, const DOUBLE weight, DOUBLE *poles) {

    const int *ells = bins->ells;
    const int nells = bins->nells;

    for (int ill=0; ill<nells; ill++) {
        const int ell = ells[ill];
        DOUBLE leg = 0.;
        if (mu > -1.1) leg += legendre(mu, ell);
        if (mu2 > -1.1) leg += legendre(mu2, ell);
        leg *= weight * (2 * ell + 1);
        poles[ill] += leg;
    }
}


static inline int countpairs_mocks_leg_fallback_DOUBLE(const int64_t N0, DOUBLE *x0, DOUBLE *y0, DOUBLE *z0, const weight_struct_DOUBLE *weights0,
                                                       const int64_t N1, DOUBLE *x1, DOUBLE *y1, DOUBLE *z1, const weight_struct_DOUBLE *weights1,
                                                       const int same_cell,
                                                       const polearray *bins, const DOUBLE rmin, const DOUBLE rmax, const DOUBLE mumax,
                                                       const DOUBLE min_xdiff, const DOUBLE min_ydiff, const DOUBLE min_zdiff,
                                                       const DOUBLE closest_icell_xpos, const DOUBLE closest_icell_ypos, const DOUBLE closest_icell_zpos,
                                                       DOUBLE *savg, uint64_t *npairs, DOUBLE *weightavg, DOUBLE *poles, const weight_method_t weight_method, const pair_weight_struct pair_weight,
                                                       const selection_struct selection, const bin_type_t bin_type, const los_type_t los_type, const int autocorr)
{
    /*----------------- FALLBACK CODE --------------------*/
    /* implementation that is guaranteed to compile */
    const DOUBLE sqr_rmin=rmin*rmin, sqr_rmax=rmax*rmax, sqr_mumax=mumax*mumax;
    const DOUBLE sqr_smin=bins->edges[0] * bins->edges[0], sqr_smax=bins->edges[bins->nedges - 1] * bins->edges[bins->nedges - 1];
    DOUBLE inv_sstep=0., smin_invstep=0.;
    if (bin_type == BIN_LIN) {
        inv_sstep = (bins->nedges - 1)/(bins->edges[bins->nedges - 1] - bins->edges[0]);
        smin_invstep = 1 - bins->edges[0] * inv_sstep; //trick to avoid adding one to (r - rmin)/rstep
    }
    // A copy whose pointers we can advance
    weight_struct_DOUBLE local_w0 = {.weights={NULL}, .num_weights=0},
                         local_w1 = {.weights={NULL}, .num_weights=0};
    pair_struct_DOUBLE pair = {.num_weights=0};
    weight_func_t_DOUBLE weight_func = NULL;
    // Same particle list, new copy of num_weights pointers into that list
    local_w0 = *weights0;
    local_w1 = *weights1;

    set_pair_struct_DOUBLE(&pair, &local_w0, &local_w1, &pair_weight);
    pair.num_weights -= 3; // 3D positions for s, mu are expected to be provided as last weights
    int need_weightavg = (pair.num_weights > 0) || (pair_weight.num);
    int need_costheta = pair_weight.num;
    if (need_weightavg) {
        weight_func = get_weight_func_by_method_DOUBLE(weight_method);
    }
    DOUBLE *xpos0 = weights0->weights[pair.num_weights], *ypos0 = weights0->weights[pair.num_weights+1], *zpos0 = weights0->weights[pair.num_weights+2];
    DOUBLE *xpos1 = weights1->weights[pair.num_weights], *ypos1 = weights1->weights[pair.num_weights+1], *zpos1 = weights1->weights[pair.num_weights+2];

    DOUBLE *xhat1 = NULL, *yhat1 = NULL, *zhat1 = NULL;
    if (need_costheta || ((autocorr == 1) && (los_type == FIRSTPOINT_LOS))) {
        xhat1 = (DOUBLE *) my_malloc(N1, sizeof(DOUBLE));
        yhat1 = (DOUBLE *) my_malloc(N1, sizeof(DOUBLE));
        zhat1 = (DOUBLE *) my_malloc(N1, sizeof(DOUBLE));
        for(int64_t i=0;i<N1;i++) {
            const DOUBLE norm1 = SQRT(xpos1[i]*xpos1[i] + ypos1[i]*ypos1[i] + zpos1[i]*zpos1[i]);
            xhat1[i] = xpos1[i]/norm1;
            yhat1[i] = ypos1[i]/norm1;
            zhat1[i] = zpos1[i]/norm1;
        }
    }

    const DOUBLE *zstart = z1, *zend = z1 + N1;
    const DOUBLE max_all_dz = SQRT(sqr_rmax - min_xdiff*min_xdiff - min_ydiff*min_ydiff);
    for(int64_t i=0; i<N0; i++) {
        const DOUBLE localx0 = *x0++, localy0 = *y0++, localz0 = *z0++;
        const DOUBLE localxpos0 = *xpos0++, localypos0 = *ypos0++, localzpos0 = *zpos0++;
        for(int w = 0; w < pair.num_weights; w++) pair.weights0[w].d = *local_w0.weights[w]++;

        DOUBLE xhat0 = ZERO, yhat0 = ZERO, zhat0 = ZERO;
        if (need_costheta || los_type == FIRSTPOINT_LOS) {
            const DOUBLE norm0 = SQRT(localxpos0*localxpos0 + localypos0*localypos0 + localzpos0*localzpos0);
            xhat0 = localxpos0/norm0;
            yhat0 = localypos0/norm0;
            zhat0 = localzpos0/norm0;
        }

        DOUBLE max_dz = max_all_dz;

        /* Now consider if this i'th particle can be a valid pair with ANY of the remaining
           j' particles. The min. difference in the d-positions between this i'th particle and ANY
           of the remaining j'th particles, is the difference between the current j'th particle and
           the current i'th particle (since all remaining j'th particles will have a larger value for
           the z-ordinate and therefore a larger difference to zpos). if this `dsep` does not satisfy
           the distance criteria, then NO remaining j'th particles will. Continue on to the next i'th
           particle
        */
        const DOUBLE this_dz = *z1 - localz0;
        if(this_dz >= max_all_dz) {
            continue;
        }
        if(same_cell == 1) {
            z1++;
        } else {
            const DOUBLE min_dx = min_xdiff > 0 ? min_xdiff + FABS(localx0 - closest_icell_xpos):min_xdiff;
            const DOUBLE min_dy = min_ydiff > 0 ? min_ydiff + FABS(localy0 - closest_icell_ypos):min_ydiff;
            const DOUBLE min_dz = min_zdiff > 0 ? (this_dz > 0 ? this_dz:min_zdiff + FABS(localz0 - closest_icell_zpos)):min_zdiff;
            const DOUBLE sqr_min_sep_this_point = min_dx*min_dx + min_dy*min_dy + min_dz*min_dz;
            if(sqr_min_sep_this_point >= sqr_rmax) {
                continue;
            }
            max_dz = SQRT(sqr_rmax - min_dx*min_dx - min_dy*min_dy);

            const DOUBLE target_z = localz0 - max_all_dz;
            while(z1 != zend && *z1 <= target_z) {
                z1++;
            }
        }/* end of same_cell if condition*/

        /* are there any pairs possible with this particle and ANY
           of the j'th particles?
           Since both z0 and z1 are sorted in increasing order,
           the largest value for z1 is stored in last_z1. Therefore,
           the smallest difference between ANY of the remaining i'th particle
           and ANY of the j'th particle is:
           the current particle (i.e., the smallest remaining z-position among the 'i'-th dataset)
           and the last j'th particle. Therefore, if this difference is already too large
           to contain a valid pair, any remaining particle pairs CAN NOT be a valid pair

           --> we can safely terminate the i-loop (i.e., terminate the calculation for this pair of
           cells)
        */
        if(z1 == zend) {
            i = N0;
            break;
        }

        DOUBLE *localz1 = z1;
        const DOUBLE target_z = localz0 - max_dz;
        while(localz1 != zend && *localz1 <= target_z) {
            localz1++;
        }

        const int64_t n_off = localz1 - zstart;
        const int64_t nleft = N1 - n_off;
        DOUBLE *localx1 = x1 + n_off;
        DOUBLE *localy1 = y1 + n_off;
        for (int w = 0; w < pair.num_weights; w++) local_w1.weights[w] = weights1->weights[w] + n_off;
        int localj = n_off - 1;
        for(int64_t j=0;j<nleft;j++){

            localj++;
            for (int w = 0; w < pair.num_weights; w++) pair.weights1[w].d = *local_w1.weights[w]++;
            {
                const DOUBLE perpx = *localx1++ - localx0, perpy = *localy1++ - localy0, perpz = *localz1++ - localz0;
                if(perpz >= max_dz) break;
                const DOUBLE sqr_r = perpx*perpx + perpy*perpy + perpz*perpz;
                if(sqr_r >= sqr_rmax || sqr_r < sqr_rmin) continue;
            }
            const DOUBLE localxpos1 = xpos1[localj], localypos1 = ypos1[localj], localzpos1 = zpos1[localj];
            if(need_costheta) pair.costheta.d = xhat1[localj]*xhat0 + yhat1[localj]*yhat0 + zhat1[localj]*zhat0;

            const DOUBLE parx = localxpos0 + localxpos1, pary = localypos0 + localypos1, parz = localzpos0 + localzpos1;
            const DOUBLE perpx = localxpos1 - localxpos0, perpy = localypos1 - localypos0, perpz = localzpos1 - localzpos0;
            const DOUBLE sqr_s = perpx*perpx + perpy*perpy + perpz*perpz;

            if(sqr_s >= sqr_smax || sqr_s < sqr_smin) continue;

            DOUBLE s = ZERO;
            DOUBLE mu = -2., mu2 = -2.;
            if (sqr_s <= 0.) {
                mu = ZERO;
                if (autocorr == 1) mu2 = ZERO;
                if((selection.selection_type & RP_SELECTION) && ((0. < selection.rpmin_sqr) || (0. >= selection.rpmax_sqr))) continue;
            }
            else if (los_type == MIDPOINT_LOS) {
                const DOUBLE s_dot_l = parx*perpx + pary*perpy + parz*perpz;
                const DOUBLE sqr_l = parx*parx + pary*pary + parz*parz;
                const DOUBLE sqr_mu = s_dot_l * s_dot_l / (sqr_l * sqr_s);
                if (sqr_mu >= sqr_mumax) continue;
                if (selection.selection_type & RP_SELECTION) {
                    const DOUBLE sqr_rp = (1. - sqr_mu) * sqr_s;
                    if ((sqr_rp < selection.rpmin_sqr) || (sqr_rp >= selection.rpmax_sqr)) continue;
                }
                mu = SIGNED(SQRT(sqr_mu), s_dot_l);
                if (autocorr == 1) mu2 = -mu;
                s = SQRT(sqr_s);
            }
            else {
                const DOUBLE s_dot_l = xhat0*perpx + yhat0*perpy + zhat0*perpz;
                const DOUBLE sqr_mu = s_dot_l * s_dot_l / sqr_s;
                int skip_mu = (sqr_mu >= sqr_mumax);
                if (selection.selection_type & RP_SELECTION) {
                    const DOUBLE sqr_rp = (1. - sqr_mu) * sqr_s;
                    if ((sqr_rp < selection.rpmin_sqr) || (sqr_rp >= selection.rpmax_sqr)) skip_mu = 1;
                }
                if (autocorr == 1) {
                    const DOUBLE s_dot_l2 = xhat1[localj]*perpx + yhat1[localj]*perpy + zhat1[localj]*perpz;
                    const DOUBLE sqr_mu2 = s_dot_l2 * s_dot_l2 / sqr_s;
                    int skip_mu2 = (sqr_mu2 >= sqr_mumax);
                    if (selection.selection_type & RP_SELECTION) {
                        const DOUBLE sqr_rp = (1. - sqr_mu2) * sqr_s;
                        if ((sqr_rp < selection.rpmin_sqr) || (sqr_rp >= selection.rpmax_sqr)) skip_mu2 = 1;
                    }
                    if (skip_mu && skip_mu2) continue;
                    s = SQRT(sqr_s);
                    if (!skip_mu) mu = s_dot_l / s;
                    if (!skip_mu2) mu2 = - s_dot_l2 / s;
                }
                else {
                    if (skip_mu) continue;
                    s = SQRT(sqr_s);
                    mu = s_dot_l / s;
                }
            }
            DOUBLE pairweight = 1.0;

            if(need_weightavg){
                pair.dx.d = perpx;
                pair.dy.d = perpy;
                pair.dz.d = perpz;

                pair.parx.d = parx;
                pair.pary.d = pary;
                pair.parz.d = parz;

                pairweight = weight_func(&pair);
            }

            int kbin = 0;
            if (bin_type == BIN_LIN) {
                kbin = (int) (s*inv_sstep + smin_invstep);
            }
            else {
                for(kbin=bins->nedges-1;kbin>=1;kbin--) {
                    if(s >= bins->edges[kbin-1]) break;
                }//finding kbin
            }
            int np = ((int) (mu > -1.1)) + ((int) (mu2 > -1.1));
            savg[kbin] += s * pairweight * np;
            weightavg[kbin] += pairweight * np;
            npairs[kbin] += np;
            legendre_DOUBLE(bins, mu, mu2, pairweight, &(poles[kbin * bins->nells]));
        }//j loop over second set of particles
    }//i loop over first set of particles

    free(xhat1); free(yhat1); free(zhat1);

    return EXIT_SUCCESS;
}
