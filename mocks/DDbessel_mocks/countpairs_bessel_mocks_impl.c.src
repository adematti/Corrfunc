// # -*- mode: c -*-
/* File: countpairs_bessel_impl.c.src */
/*
  This file is a part of the Corrfunc package
  Copyright (C) 2015-- Manodeep Sinha (manodeep@gmail.com)
  License: MIT LICENSE. See LICENSE file under the top-level
  directory at https://github.com/manodeep/Corrfunc/
*/

#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <signal.h>
#include <unistd.h>

#include "countpairs_bessel_mocks_impl_DOUBLE.h" //function proto-type
#include "countpairs_bessel_mocks_kernels_DOUBLE.c"

#include "defs.h"
#include "utils.h" //all of the utilities
#include "progressbar.h" //for the progressbar
#include "cpu_features.h" //prototype get_max_usable_isa required for runtime dispatch

#include "gridlink_mocks_impl_DOUBLE.h"//function proto-type for gridlink
#include "gridlink_utils_DOUBLE.h" //for associated helper routines

#if defined(_OPENMP)
#include <omp.h>
#endif

int interrupt_status_bessel_mocks_DOUBLE = EXIT_SUCCESS;

void interrupt_handler_countpairs_bessel_DOUBLE(int signo)
{
    fprintf(stderr,"Received signal = `%s' (signo = %d). Aborting \n", strsignal(signo), signo);
    interrupt_status_bessel_mocks_DOUBLE = EXIT_FAILURE;
}


countpairs_mocks_func_ptr_DOUBLE countpairs_bessel_mocks_driver_DOUBLE(const struct config_options *options)
{
    static countpairs_mocks_func_ptr_DOUBLE function = NULL;
    static isa old_isa = (isa) - 1;
    if(old_isa == options->instruction_set) {
        return function;
    }


    /* Array of function pointers */
    countpairs_mocks_func_ptr_DOUBLE allfunctions[] = {
        countpairs_mocks_bessel_fallback_DOUBLE,
    };

    const int num_functions = sizeof(allfunctions)/sizeof(void *);
    const int fallback_index = 0;
    int curr_index = 0;
    int sse_index = curr_index, avx_index = curr_index, avx512_index = curr_index;


    if(curr_index != num_functions-1) {
      fprintf(stderr,"ERROR: Bug in code (current index = %d *should equal* num_functions-1 = %d-1)\n",
              curr_index, num_functions);
      return NULL;
    }

    int function_dispatch = num_functions-1;  //Set default to fastest available
    /* Check that cpu supports feature */
    if(options->instruction_set >= 0) {
        switch(options->instruction_set) {
        case(AVX512F):function_dispatch=avx512_index;break;
        case(AVX2):
        case(AVX):function_dispatch=avx_index;break;
        case(SSE42):function_dispatch=sse_index;break;
        default:function_dispatch=fallback_index;break;
        }
    }
    if(function_dispatch >= num_functions) {
      fprintf(stderr,"In %s> ERROR: Could not resolve the correct function.\n Function index = %d must lie between [0, %d)\n",
              __FUNCTION__, function_dispatch, num_functions);
      return NULL;
    }
    function = allfunctions[function_dispatch];
    old_isa = options->instruction_set;

    if(options->verbose){
        // Must be ordered low to high, since higher ISA may be aliased to lower ones
        if(function_dispatch == fallback_index){
            fprintf(stderr,"Using fallback kernel\n");
        } else if(function_dispatch == sse_index){
            fprintf(stderr,"Using SSE kernel\n");
        } else if(function_dispatch == avx_index){
            fprintf(stderr,"Using AVX kernel\n");
        } else if(function_dispatch == avx512_index){
            fprintf(stderr,"Using AVX512 kernel\n");
        } else {
            fprintf(stderr,"Unknown kernel!\n");
            return NULL;
        }
    }

    return function;
}


int countpairs_mocks_bessel_DOUBLE(const int64_t ND1, DOUBLE *X1, DOUBLE *Y1, DOUBLE *Z1,
                                   const int64_t ND2, DOUBLE *X2, DOUBLE *Y2, DOUBLE *Z2,
                                   const int numthreads,
                                   const int autocorr,
                                   polearray *bins,
                                   const double drmin, const double drmax, const double dmumax,
                                   results_countpairs_mocks_bessel *results,
                                   struct config_options *options,
                                   struct extra_options *extra)
{

    if(options->float_type != sizeof(DOUBLE)) {
        fprintf(stderr,"ERROR: In %s> Can only handle arrays of size=%zu. Got an array of size = %zu\n",
                __FUNCTION__, sizeof(DOUBLE), options->float_type);
        return EXIT_FAILURE;
    }
    const DOUBLE rmin = drmin, rmax = drmax, mumax = dmumax;

    /***********************
     *initializing the  bins
     ************************/
     if( ! (rmin >= 0.0 && rmax > 0.0 && rmin < rmax) ) {
         fprintf(stderr,"Error: Could not setup with r bins correctly. (rmin = %lf, rmax = %lf). "
                 "Expected non-zero rmin/rmax with rmax > rmin\n", rmin, rmax);
         return EXIT_FAILURE;
     }
     int nbins = bins->nedges * bins->nells;

     //Pack in the results
     results->nells = bins->nells;
     results->nmodes = bins->nedges;
     results->ells = my_malloc(sizeof(*(results->ells)), bins->nells);
     results->modes = my_malloc(sizeof(*(results->modes)), bins->nedges);
     results->poles = my_calloc(sizeof(*(results->poles)), nbins);
     if(results->ells == NULL || results->modes == NULL || results->poles == NULL) {
         free_results_mocks_bessel(results);
         return EXIT_FAILURE;
     }

     for(int imode=0;imode<bins->nedges;imode++) results->modes[imode] = bins->edges[imode];
     for(int ill=0;ill<bins->nells;ill++) results->ells[ill] = bins->ells[ill];

     //Check inputs
     if(ND1 == 0 || (autocorr == 0 && ND2 == 0)) {
         return EXIT_SUCCESS;
     }

    // If no extra options were passed, create dummy options
    // This allows us to pass arguments like "extra->weights0" below;
    // they'll just be NULLs, which is the correct behavior
    struct extra_options dummy_extra;
    if(extra == NULL){
      weight_method_t dummy_method = NONE;
      dummy_extra = get_extra_options(dummy_method);
      extra = &dummy_extra;
    }

    int need_weightavg = (extra->weights0.num_weights > 3) || (extra->pair_weight.num);
    //int need_weightavg = extra->weight_method != NONE;

    options->sort_on_z = 1;
    struct timeval t0;
    if(options->c_api_timer) {
        gettimeofday(&t0, NULL);
    }

#if defined(_OPENMP)
    omp_set_num_threads(numthreads);
#else
    (void) numthreads;
#endif

    if(options->max_cells_per_dim == 0) {
        fprintf(stderr,"Warning: Max. cells per dimension is set to 0 - resetting to `NLATMAX' = %d\n", NLATMAX);
        options->max_cells_per_dim = NLATMAX;
    }
    for(int i=0;i<3;i++) {
        if(options->bin_refine_factors[i] < 1) {
            fprintf(stderr,"Warning: bin refine factor along axis = %d *must* be >=1. Instead found bin refine factor =%d\n",
                    i, options->bin_refine_factors[i]);
            reset_bin_refine_factors(options);
            break;/* all factors have been reset -> no point continuing with the loop */
        }
    }

    /* setup interrupt handler -> mostly useful during the python execution.
       Let's Ctrl-C abort the extension  */
    SETUP_INTERRUPT_HANDLERS(interrupt_handler_countpairs_bessel_DOUBLE);

    DOUBLE xmin, xmax, ymin, ymax, zmin, zmax;
    xmin = ymin = zmin = MAX_POSITIVE_FLOAT;
    xmax = ymax = zmax = -MAX_POSITIVE_FLOAT;
    get_max_min_DOUBLE(ND1, X1, Y1, Z1, &xmin, &ymin, &zmin, &xmax, &ymax, &zmax);

    if(autocorr==0) {
        get_max_min_DOUBLE(ND2, X2, Y2, Z2, &xmin, &ymin, &zmin, &xmax, &ymax, &zmax);
    }

    const DOUBLE xdiff = xmax-xmin;
    const DOUBLE ydiff = ymax-ymin;
    const DOUBLE zdiff = zmax-zmin;
    if(get_bin_refine_scheme(options) == BINNING_DFL) {
        if(rmax < 0.05*xdiff) {
            options->bin_refine_factors[0] = 1;
      }
        if(rmax < 0.05*ydiff) {
            options->bin_refine_factors[1] = 1;
        }
        if(rmax < 0.05*zdiff) {
            options->bin_refine_factors[2] = 1;
        }
    }

    /*---Create 3-D lattice--------------------------------------*/
    int nmesh_x=0,nmesh_y=0,nmesh_z=0;
    cellarray_mocks_DOUBLE *lattice1 = gridlink_mocks_DOUBLE(ND1, X1, Y1, Z1, &(extra->weights0),
                                                             xmin, xmax, ymin, ymax, zmin, zmax,
                                                             rmax, rmax, rmax,
                                                             options->bin_refine_factors[0],
                                                             options->bin_refine_factors[1],
                                                             options->bin_refine_factors[2],
                                                             &nmesh_x, &nmesh_y, &nmesh_z,
                                                             options);
    if(lattice1 == NULL) {
        return EXIT_FAILURE;
    }

    /* If there too few cells (BOOST_CELL_THRESH is ~10), and the number of cells can be increased, then boost bin refine factor by ~1*/
    const double avg_np = ((double)ND1)/(nmesh_x*nmesh_y*nmesh_z);
    const int max_nmesh = fmax(nmesh_x, fmax(nmesh_y, nmesh_z));
    if((max_nmesh <= BOOST_CELL_THRESH || avg_np >= BOOST_NUMPART_THRESH)
       && max_nmesh < options->max_cells_per_dim) {
        if(options->verbose) {
            fprintf(stderr,"%s> gridlink seems inefficient. nmesh = (%d, %d, %d); avg_np = %.3g. ", __FUNCTION__, nmesh_x, nmesh_y, nmesh_z, avg_np);
        }
        if(get_bin_refine_scheme(options) == BINNING_DFL) {
            if(options->verbose) {
                fprintf(stderr,"Boosting bin refine factor - should lead to better performance\n");
            }
            // Only boost the first two dimensions.  Prevents excessive refinement.
            for(int i=0;i<2;i++) {
                options->bin_refine_factors[i] += BOOST_BIN_REF;
            }

            free_cellarray_mocks_DOUBLE(lattice1, nmesh_x * (int64_t) nmesh_y * nmesh_z);
            lattice1 = gridlink_mocks_DOUBLE(ND1, X1, Y1, Z1, &(extra->weights0),
                                             xmin, xmax, ymin, ymax, zmin, zmax,
                                             rmax, rmax, rmax,
                                             options->bin_refine_factors[0],
                                             options->bin_refine_factors[1],
                                             options->bin_refine_factors[2],
                                             &nmesh_x, &nmesh_y, &nmesh_z,
                                             options);
            if(lattice1 == NULL) {
                return EXIT_FAILURE;
            }
        } else {
            if(options->verbose) {
                fprintf(stderr,"Boosting bin refine factor could have helped. However, since custom bin refine factors "
                        "= (%d, %d, %d) are being used - continuing with inefficient mesh\n", options->bin_refine_factors[0],
                        options->bin_refine_factors[1], options->bin_refine_factors[2]);
            }
        }
    }

    cellarray_mocks_DOUBLE *lattice2 = NULL;
    if (autocorr == 0) {
        int ngrid2_x=0,ngrid2_y=0,ngrid2_z=0;
        lattice2 = gridlink_mocks_DOUBLE(ND2, X2, Y2, Z2, &(extra->weights1),
                                         xmin, xmax, ymin, ymax, zmin, zmax,
                                         rmax, rmax, rmax,
                                         options->bin_refine_factors[0],
                                         options->bin_refine_factors[1],
                                         options->bin_refine_factors[2],
                                         &ngrid2_x, &ngrid2_y, &ngrid2_z,
                                         options);
        if(lattice2 == NULL) {
            return EXIT_FAILURE;
        }
        if( ! (nmesh_x == ngrid2_x && nmesh_y == ngrid2_y && nmesh_z == ngrid2_z) ) {
            fprintf(stderr,"Error: The two sets of 3-D lattices do not have identical bins. First has dims (%d, %d, %d) while second has (%d, %d, %d)\n",
                    nmesh_x, nmesh_y, nmesh_z, ngrid2_x, ngrid2_y, ngrid2_z);
            return EXIT_FAILURE;
        }
    } else {
        lattice2 = lattice1;
    }

    const int64_t totncells = (int64_t) nmesh_x * (int64_t) nmesh_y * (int64_t) nmesh_z;

    int64_t num_cell_pairs = 0;
    struct cell_pair_DOUBLE *all_cell_pairs = generate_cell_pairs_mocks_DOUBLE(lattice1, lattice2, totncells,
                                                                               &num_cell_pairs,
                                                                               options->bin_refine_factors[0],
                                                                               options->bin_refine_factors[1],
                                                                               options->bin_refine_factors[2],
                                                                               nmesh_x, nmesh_y, nmesh_z,
                                                                               rmax,
                                                                               options->enable_min_sep_opt,
                                                                               autocorr);
    if(all_cell_pairs == NULL) {
        free_cellarray_mocks_DOUBLE(lattice1, totncells);
        if(autocorr == 0) {
            free_cellarray_mocks_DOUBLE(lattice2, totncells);
        }
        return EXIT_FAILURE;
    }

    DOUBLE *poles = (DOUBLE *) my_calloc(sizeof(DOUBLE), nbins);
    if(poles == NULL) {
        free_cellarray_mocks_DOUBLE(lattice1, totncells);
        if(autocorr == 0) {
            free_cellarray_mocks_DOUBLE(lattice2, totncells);
        }
        free(poles);
        return EXIT_FAILURE;
    }

    /*---Gridlink-variables----------------*/
#if defined(_OPENMP)
    DOUBLE **all_poles = (DOUBLE **) matrix_calloc(sizeof(DOUBLE), numthreads, nbins);

    if(all_poles == NULL) {
        free_cellarray_mocks_DOUBLE(lattice1, totncells);
        if(autocorr == 0) {
            free_cellarray_mocks_DOUBLE(lattice2, totncells);
        }
        matrix_free((void **)all_poles, numthreads);
        return EXIT_FAILURE;
    }
#endif //USE_OMP

    /* runtime dispatch - get the function pointer */
    countpairs_mocks_func_ptr_DOUBLE countpairs_bessel_mocks_function_DOUBLE = countpairs_bessel_mocks_driver_DOUBLE(options);
    if(countpairs_bessel_mocks_function_DOUBLE == NULL) {
        free_cellarray_mocks_DOUBLE(lattice1, totncells);
        if(autocorr == 0) {
            free_cellarray_mocks_DOUBLE(lattice2, totncells);
        }
        return EXIT_FAILURE;
    }

    int interrupted=0, numdone=0, abort_status=EXIT_SUCCESS;
    if(options->verbose) {
        init_my_progressbar(num_cell_pairs, &interrupted);
    }

#if defined(_OPENMP)
#pragma omp parallel shared(numdone, abort_status, interrupt_status_bessel_mocks_DOUBLE)
    {
        const int tid = omp_get_thread_num();
        DOUBLE *this_poles = all_poles[tid];
#pragma omp for schedule(dynamic)
#else
        DOUBLE *this_poles = poles;
#endif//USE_OMP

        /*---Loop-over-all-cell-pairs--------------------*/
        for(int64_t icellpair=0;icellpair<num_cell_pairs;icellpair++) {
#if defined(_OPENMP)
#pragma omp flush (abort_status, interrupt_status_bessel_mocks_DOUBLE)
#endif
            if(abort_status == EXIT_SUCCESS && interrupt_status_bessel_mocks_DOUBLE == EXIT_SUCCESS) {
                //omp cancel was introduced in omp 4.0 - so this is my way of checking if loop needs to be cancelled
                /* If the verbose option is not enabled, avoid outputting anything unnecessary*/
                if(options->verbose) {
#if defined(_OPENMP)
                    if (omp_get_thread_num() == 0)
#endif
                        my_progressbar(numdone,&interrupted);


#if defined(_OPENMP)
#pragma omp atomic
#endif
                    numdone++;
                }

                struct cell_pair_DOUBLE *this_cell_pair = &all_cell_pairs[icellpair];

                const int64_t icell = this_cell_pair->cellindex1;
                const int64_t icell2 = this_cell_pair->cellindex2;
                const cellarray_mocks_DOUBLE *first = &lattice1[icell];
                const cellarray_mocks_DOUBLE *second = &lattice2[icell2];
                const int status = countpairs_bessel_mocks_function_DOUBLE(first->nelements, first->x, first->y, first->z, &(first->weights),
                                                                           second->nelements, second->x, second->y, second->z, &(second->weights),
                                                                           this_cell_pair->same_cell,
                                                                           bins, rmin, rmax, mumax,
                                                                           this_cell_pair->min_dx, this_cell_pair->min_dy, this_cell_pair->min_dz,
                                                                           this_cell_pair->closest_x1, this_cell_pair->closest_y1, this_cell_pair->closest_z1,
                                                                           this_poles, extra->weight_method, extra->pair_weight, options->los_type, autocorr);

                /* This actually causes a race condition under OpenMP - but mostly
                   I care that an error occurred - rather than the exact value of
                   the error status */
                abort_status |= status;

            }//abort-status
        }//icellpair loop over num_cell_pairs

#if defined(_OPENMP)
    }//close the omp parallel region
#endif//USE_OMP
    free(all_cell_pairs);

    if(options->copy_particles == 0) {
        int64_t *original_index = lattice1[0].original_index;
        int status = reorder_particles_mocks_back_into_original_order_DOUBLE(ND1, original_index, &(extra->weights0));
        if(status != EXIT_SUCCESS) {
            return status;
        }
        if(autocorr == 0) {
            original_index = lattice2[0].original_index;
            status = reorder_particles_mocks_back_into_original_order_DOUBLE(ND2, original_index, &(extra->weights1));
            if(status != EXIT_SUCCESS) {
                return status;
            }
        }
    }

    free_cellarray_mocks_DOUBLE(lattice1, totncells);
    if(autocorr == 0) {
        free_cellarray_mocks_DOUBLE(lattice2, totncells);
    }

    if(abort_status != EXIT_SUCCESS || interrupt_status_bessel_mocks_DOUBLE != EXIT_SUCCESS) {
        /* Cleanup memory here if aborting */
#if defined(_OPENMP)
        matrix_free((void **) all_poles, numthreads);
#endif
        return EXIT_FAILURE;
    }

    if(options->verbose) {
        finish_myprogressbar(&interrupted);
    }

#if defined(_OPENMP)

    for(int i=0;i<numthreads;i++) {
        for(int j=0;j<nbins;j++) {
            poles[j] += all_poles[i][j];
        }
    }
    matrix_free((void **) all_poles, numthreads);
#endif //USE_OMP
    if(autocorr == 1) {
        // Is the min. requested separation 0.0 ?
        // The comparison is '<=' rather than '==' only to silence the compiler
        if(rmin <= 0.0) {
            // Then, add all the self-pairs. This ensures that
            // a cross-correlation with two identical datasets
            // produces the same result as the auto-correlation
            DOUBLE pairweight = 1.0;
            if(need_weightavg){
                // Keep in mind this is an autocorrelation (i.e. only one particle set to consider)
                pair_struct_DOUBLE pair;
                set_pair_struct_DOUBLE(&pair, (weight_struct_DOUBLE *) &(extra->weights0), (weight_struct_DOUBLE *) &(extra->weights0), &(extra->pair_weight));
                pair.num_weights -= 3;
                weight_func_t_DOUBLE weight_func = get_weight_func_by_method_DOUBLE(extra->weight_method);
                for(int64_t j = 0; j < ND1; j++){
                    for(int w = 0; w < pair.num_weights; w++){
                        pair.weights0[w].d = ((DOUBLE *) extra->weights0.weights[w])[j];
                        pair.weights1[w].d = ((DOUBLE *) extra->weights0.weights[w])[j];
                    }
                    pairweight = weight_func(&pair);
                    spherical_bessel_legendre_DOUBLE(bins, 0.0, 0.0, -2.0, pairweight, poles);
                }
            }
            else {
                spherical_bessel_legendre_DOUBLE(bins, 0.0, 0.0, -2.0, (DOUBLE) ND1, poles);
            }
        }
    }
    for(int j=0;j<nbins;j++) results->poles[j] = poles[j];
    free(poles);

    /* reset interrupt handlers to default */
    RESET_INTERRUPT_HANDLERS();
    reset_bin_refine_factors(options);

    if(options->c_api_timer) {
        struct timeval t1;
        gettimeofday(&t1, NULL);
        options->c_api_time = ADD_DIFF_TIME(t0, t1);
    }

    return EXIT_SUCCESS;
}
